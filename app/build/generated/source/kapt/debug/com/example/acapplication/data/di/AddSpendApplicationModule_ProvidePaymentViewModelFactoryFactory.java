// Generated by Dagger (https://dagger.dev).
package com.example.acapplication.data.di;

import com.example.acapplication.repository.ClientRepository;
import com.example.acapplication.repository.DailyDetailsRepository;
import com.example.acapplication.repository.PaymentRepository;
import com.example.acapplication.viewmodel.viewmodelfactory.PaymentViewModelFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AddSpendApplicationModule_ProvidePaymentViewModelFactoryFactory implements Factory<PaymentViewModelFactory> {
  private final Provider<PaymentRepository> paymentRepositoryProvider;

  private final Provider<ClientRepository> clientRepositoryProvider;

  private final Provider<DailyDetailsRepository> dailyDetailsRepositoryProvider;

  public AddSpendApplicationModule_ProvidePaymentViewModelFactoryFactory(
      Provider<PaymentRepository> paymentRepositoryProvider,
      Provider<ClientRepository> clientRepositoryProvider,
      Provider<DailyDetailsRepository> dailyDetailsRepositoryProvider) {
    this.paymentRepositoryProvider = paymentRepositoryProvider;
    this.clientRepositoryProvider = clientRepositoryProvider;
    this.dailyDetailsRepositoryProvider = dailyDetailsRepositoryProvider;
  }

  @Override
  public PaymentViewModelFactory get() {
    return providePaymentViewModelFactory(paymentRepositoryProvider.get(), clientRepositoryProvider.get(), dailyDetailsRepositoryProvider.get());
  }

  public static AddSpendApplicationModule_ProvidePaymentViewModelFactoryFactory create(
      Provider<PaymentRepository> paymentRepositoryProvider,
      Provider<ClientRepository> clientRepositoryProvider,
      Provider<DailyDetailsRepository> dailyDetailsRepositoryProvider) {
    return new AddSpendApplicationModule_ProvidePaymentViewModelFactoryFactory(paymentRepositoryProvider, clientRepositoryProvider, dailyDetailsRepositoryProvider);
  }

  public static PaymentViewModelFactory providePaymentViewModelFactory(
      PaymentRepository paymentRepository, ClientRepository clientRepository,
      DailyDetailsRepository dailyDetailsRepository) {
    return Preconditions.checkNotNullFromProvides(AddSpendApplicationModule.INSTANCE.providePaymentViewModelFactory(paymentRepository, clientRepository, dailyDetailsRepository));
  }
}
