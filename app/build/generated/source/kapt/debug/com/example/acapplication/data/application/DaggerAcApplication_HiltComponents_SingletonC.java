// Generated by Dagger (https://dagger.dev).
package com.example.acapplication.data.application;

import android.app.Activity;
import android.app.Service;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import com.example.acapplication.data.di.AddSpendApplicationModule;
import com.example.acapplication.data.di.AddSpendApplicationModule_ProvideAcDataBaseFactory;
import com.example.acapplication.data.di.AddSpendApplicationModule_ProvideAddSpendViewModelFactoryFactory;
import com.example.acapplication.data.di.AddSpendApplicationModule_ProvideClientRepositoryFactory;
import com.example.acapplication.data.di.AddSpendApplicationModule_ProvideClientViewModelFactoryFactory;
import com.example.acapplication.data.di.AddSpendApplicationModule_ProvideDailyDetailsRepositoryFactory;
import com.example.acapplication.data.di.AddSpendApplicationModule_ProvideDailyDetailsViewModelFactoryFactory;
import com.example.acapplication.data.di.AddSpendApplicationModule_ProvideInvoiceRepositoryFactory;
import com.example.acapplication.data.di.AddSpendApplicationModule_ProvideInvoiceViewModelFactoryFactory;
import com.example.acapplication.data.di.AddSpendApplicationModule_ProvidePaymentRepositoryFactory;
import com.example.acapplication.data.di.AddSpendApplicationModule_ProvidePaymentViewModelFactoryFactory;
import com.example.acapplication.data.di.AddSpendApplicationModule_ProvideSpendRepositoryFactory;
import com.example.acapplication.model.database.AcDataBase;
import com.example.acapplication.repository.ClientRepository;
import com.example.acapplication.repository.DailyDetailsRepository;
import com.example.acapplication.repository.InvoiceRepository;
import com.example.acapplication.repository.PaymentRepository;
import com.example.acapplication.repository.SpendRepository;
import com.example.acapplication.view.activity.AddClientActivity;
import com.example.acapplication.view.activity.AddClientActivity_MembersInjector;
import com.example.acapplication.view.activity.AddInvoiceActivity;
import com.example.acapplication.view.activity.AddInvoiceActivity_MembersInjector;
import com.example.acapplication.view.activity.AddPaymentActivity;
import com.example.acapplication.view.activity.AddPaymentActivity_MembersInjector;
import com.example.acapplication.view.activity.AddSpendActivity;
import com.example.acapplication.view.activity.AddSpendActivity_MembersInjector;
import com.example.acapplication.view.activity.MainActivity;
import com.example.acapplication.view.activity.MainActivity_MembersInjector;
import com.example.acapplication.view.activity.ProfileActivity;
import com.example.acapplication.view.activity.ProfileActivity_MembersInjector;
import com.example.acapplication.view.dialog.AddClientDialog;
import com.example.acapplication.view.dialog.AddClientDialog_MembersInjector;
import com.example.acapplication.viewmodel.viewmodelfactory.AddSpendViewModelFactory;
import com.example.acapplication.viewmodel.viewmodelfactory.ClientViewModelFactory;
import com.example.acapplication.viewmodel.viewmodelfactory.DailyDetailsViewModelFactory;
import com.example.acapplication.viewmodel.viewmodelfactory.InvoiceViewModelFactory;
import com.example.acapplication.viewmodel.viewmodelfactory.PaymentViewModelFactory;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_Lifecycle_Factory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAcApplication_HiltComponents_SingletonC extends AcApplication_HiltComponents.SingletonC {
  private final ApplicationContextModule applicationContextModule;

  private final DaggerAcApplication_HiltComponents_SingletonC singletonC = this;

  private Provider<AcDataBase> provideAcDataBaseProvider;

  private Provider<ClientRepository> provideClientRepositoryProvider;

  private Provider<DailyDetailsRepository> provideDailyDetailsRepositoryProvider;

  private Provider<ClientViewModelFactory> provideClientViewModelFactoryProvider;

  private Provider<InvoiceRepository> provideInvoiceRepositoryProvider;

  private Provider<InvoiceViewModelFactory> provideInvoiceViewModelFactoryProvider;

  private Provider<PaymentRepository> providePaymentRepositoryProvider;

  private Provider<PaymentViewModelFactory> providePaymentViewModelFactoryProvider;

  private Provider<SpendRepository> provideSpendRepositoryProvider;

  private Provider<AddSpendViewModelFactory> provideAddSpendViewModelFactoryProvider;

  private Provider<DailyDetailsViewModelFactory> provideDailyDetailsViewModelFactoryProvider;

  private DaggerAcApplication_HiltComponents_SingletonC(
      ApplicationContextModule applicationContextModuleParam) {
    this.applicationContextModule = applicationContextModuleParam;
    initialize(applicationContextModuleParam);

  }

  public static Builder builder() {
    return new Builder();
  }

  private AcDataBase acDataBase() {
    return AddSpendApplicationModule_ProvideAcDataBaseFactory.provideAcDataBase(ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
  }

  private ClientRepository clientRepository() {
    return AddSpendApplicationModule_ProvideClientRepositoryFactory.provideClientRepository(provideAcDataBaseProvider.get());
  }

  private DailyDetailsRepository dailyDetailsRepository() {
    return AddSpendApplicationModule_ProvideDailyDetailsRepositoryFactory.provideDailyDetailsRepository(provideAcDataBaseProvider.get());
  }

  private ClientViewModelFactory clientViewModelFactory() {
    return AddSpendApplicationModule_ProvideClientViewModelFactoryFactory.provideClientViewModelFactory(provideClientRepositoryProvider.get(), provideDailyDetailsRepositoryProvider.get());
  }

  private InvoiceRepository invoiceRepository() {
    return AddSpendApplicationModule_ProvideInvoiceRepositoryFactory.provideInvoiceRepository(provideAcDataBaseProvider.get());
  }

  private InvoiceViewModelFactory invoiceViewModelFactory() {
    return AddSpendApplicationModule_ProvideInvoiceViewModelFactoryFactory.provideInvoiceViewModelFactory(provideInvoiceRepositoryProvider.get(), provideDailyDetailsRepositoryProvider.get(), provideClientRepositoryProvider.get());
  }

  private PaymentRepository paymentRepository() {
    return AddSpendApplicationModule_ProvidePaymentRepositoryFactory.providePaymentRepository(provideAcDataBaseProvider.get());
  }

  private PaymentViewModelFactory paymentViewModelFactory() {
    return AddSpendApplicationModule_ProvidePaymentViewModelFactoryFactory.providePaymentViewModelFactory(providePaymentRepositoryProvider.get(), provideClientRepositoryProvider.get(), provideDailyDetailsRepositoryProvider.get());
  }

  private SpendRepository spendRepository() {
    return AddSpendApplicationModule_ProvideSpendRepositoryFactory.provideSpendRepository(provideAcDataBaseProvider.get());
  }

  private AddSpendViewModelFactory addSpendViewModelFactory() {
    return AddSpendApplicationModule_ProvideAddSpendViewModelFactoryFactory.provideAddSpendViewModelFactory(provideSpendRepositoryProvider.get(), provideDailyDetailsRepositoryProvider.get(), provideClientRepositoryProvider.get());
  }

  private DailyDetailsViewModelFactory dailyDetailsViewModelFactory() {
    return AddSpendApplicationModule_ProvideDailyDetailsViewModelFactoryFactory.provideDailyDetailsViewModelFactory(provideDailyDetailsRepositoryProvider.get(), provideClientRepositoryProvider.get(), provideInvoiceRepositoryProvider.get(), providePaymentRepositoryProvider.get(), provideSpendRepositoryProvider.get());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final ApplicationContextModule applicationContextModuleParam) {
    this.provideAcDataBaseProvider = DoubleCheck.provider(new SwitchingProvider<AcDataBase>(singletonC, 2));
    this.provideClientRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<ClientRepository>(singletonC, 1));
    this.provideDailyDetailsRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<DailyDetailsRepository>(singletonC, 3));
    this.provideClientViewModelFactoryProvider = DoubleCheck.provider(new SwitchingProvider<ClientViewModelFactory>(singletonC, 0));
    this.provideInvoiceRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<InvoiceRepository>(singletonC, 5));
    this.provideInvoiceViewModelFactoryProvider = DoubleCheck.provider(new SwitchingProvider<InvoiceViewModelFactory>(singletonC, 4));
    this.providePaymentRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<PaymentRepository>(singletonC, 7));
    this.providePaymentViewModelFactoryProvider = DoubleCheck.provider(new SwitchingProvider<PaymentViewModelFactory>(singletonC, 6));
    this.provideSpendRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<SpendRepository>(singletonC, 9));
    this.provideAddSpendViewModelFactoryProvider = DoubleCheck.provider(new SwitchingProvider<AddSpendViewModelFactory>(singletonC, 8));
    this.provideDailyDetailsViewModelFactoryProvider = DoubleCheck.provider(new SwitchingProvider<DailyDetailsViewModelFactory>(singletonC, 10));
  }

  @Override
  public void injectAcApplication(AcApplication acApplication) {
  }

  @Override
  public ActivityRetainedComponentBuilder retainedComponentBuilder() {
    return new ActivityRetainedCBuilder(singletonC);
  }

  @Override
  public ServiceComponentBuilder serviceComponentBuilder() {
    return new ServiceCBuilder(singletonC);
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private Builder() {
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder addSpendApplicationModule(AddSpendApplicationModule addSpendApplicationModule) {
      Preconditions.checkNotNull(addSpendApplicationModule);
      return this;
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    public AcApplication_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      return new DaggerAcApplication_HiltComponents_SingletonC(applicationContextModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements AcApplication_HiltComponents.ActivityRetainedC.Builder {
    private final DaggerAcApplication_HiltComponents_SingletonC singletonC;

    private ActivityRetainedCBuilder(DaggerAcApplication_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public AcApplication_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl(singletonC);
    }
  }

  private static final class ActivityCBuilder implements AcApplication_HiltComponents.ActivityC.Builder {
    private final DaggerAcApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private Activity activity;

    private ActivityCBuilder(DaggerAcApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ActivityCBuilder activity(Activity activity) {
      this.activity = Preconditions.checkNotNull(activity);
      return this;
    }

    @Override
    public AcApplication_HiltComponents.ActivityC build() {
      Preconditions.checkBuilderRequirement(activity, Activity.class);
      return new ActivityCImpl(singletonC, activityRetainedCImpl, activity);
    }
  }

  private static final class FragmentCBuilder implements AcApplication_HiltComponents.FragmentC.Builder {
    private final DaggerAcApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private Fragment fragment;

    private FragmentCBuilder(DaggerAcApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public FragmentCBuilder fragment(Fragment fragment) {
      this.fragment = Preconditions.checkNotNull(fragment);
      return this;
    }

    @Override
    public AcApplication_HiltComponents.FragmentC build() {
      Preconditions.checkBuilderRequirement(fragment, Fragment.class);
      return new FragmentCImpl(singletonC, activityRetainedCImpl, activityCImpl, fragment);
    }
  }

  private static final class ViewWithFragmentCBuilder implements AcApplication_HiltComponents.ViewWithFragmentC.Builder {
    private final DaggerAcApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private View view;

    private ViewWithFragmentCBuilder(DaggerAcApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;
    }

    @Override
    public ViewWithFragmentCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public AcApplication_HiltComponents.ViewWithFragmentC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewWithFragmentCImpl(singletonC, activityRetainedCImpl, activityCImpl, fragmentCImpl, view);
    }
  }

  private static final class ViewCBuilder implements AcApplication_HiltComponents.ViewC.Builder {
    private final DaggerAcApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private View view;

    private ViewCBuilder(DaggerAcApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public ViewCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public AcApplication_HiltComponents.ViewC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewCImpl(singletonC, activityRetainedCImpl, activityCImpl, view);
    }
  }

  private static final class ViewModelCBuilder implements AcApplication_HiltComponents.ViewModelC.Builder {
    private final DaggerAcApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private SavedStateHandle savedStateHandle;

    private ViewModelCBuilder(DaggerAcApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
      this.savedStateHandle = Preconditions.checkNotNull(handle);
      return this;
    }

    @Override
    public AcApplication_HiltComponents.ViewModelC build() {
      Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
      return new ViewModelCImpl(singletonC, activityRetainedCImpl, savedStateHandle);
    }
  }

  private static final class ServiceCBuilder implements AcApplication_HiltComponents.ServiceC.Builder {
    private final DaggerAcApplication_HiltComponents_SingletonC singletonC;

    private Service service;

    private ServiceCBuilder(DaggerAcApplication_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public AcApplication_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonC, service);
    }
  }

  private static final class ViewWithFragmentCImpl extends AcApplication_HiltComponents.ViewWithFragmentC {
    private final DaggerAcApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private final ViewWithFragmentCImpl viewWithFragmentCImpl = this;

    private ViewWithFragmentCImpl(DaggerAcApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl, View viewParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;


    }
  }

  private static final class FragmentCImpl extends AcApplication_HiltComponents.FragmentC {
    private final DaggerAcApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl = this;

    private FragmentCImpl(DaggerAcApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        Fragment fragmentParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }

    @Override
    public void injectAddClientDialog(AddClientDialog addClientDialog) {
      injectAddClientDialog2(addClientDialog);
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return activityCImpl.getHiltInternalFactoryFactory();
    }

    @Override
    public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
      return new ViewWithFragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl, fragmentCImpl);
    }

    private AddClientDialog injectAddClientDialog2(AddClientDialog instance) {
      AddClientDialog_MembersInjector.injectClientViewModelFactory(instance, singletonC.provideClientViewModelFactoryProvider.get());
      return instance;
    }
  }

  private static final class ViewCImpl extends AcApplication_HiltComponents.ViewC {
    private final DaggerAcApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final ViewCImpl viewCImpl = this;

    private ViewCImpl(DaggerAcApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl, View viewParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }
  }

  private static final class ActivityCImpl extends AcApplication_HiltComponents.ActivityC {
    private final DaggerAcApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl = this;

    private ActivityCImpl(DaggerAcApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;


    }

    @Override
    public void injectAddClientActivity(AddClientActivity addClientActivity) {
      injectAddClientActivity2(addClientActivity);
    }

    @Override
    public void injectAddInvoiceActivity(AddInvoiceActivity addInvoiceActivity) {
      injectAddInvoiceActivity2(addInvoiceActivity);
    }

    @Override
    public void injectAddPaymentActivity(AddPaymentActivity addPaymentActivity) {
      injectAddPaymentActivity2(addPaymentActivity);
    }

    @Override
    public void injectAddSpendActivity(AddSpendActivity addSpendActivity) {
      injectAddSpendActivity2(addSpendActivity);
    }

    @Override
    public void injectMainActivity(MainActivity mainActivity) {
      injectMainActivity2(mainActivity);
    }

    @Override
    public void injectProfileActivity(ProfileActivity profileActivity) {
      injectProfileActivity2(profileActivity);
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), Collections.<String>emptySet(), new ViewModelCBuilder(singletonC, activityRetainedCImpl));
    }

    @Override
    public Set<String> getViewModelKeys() {
      return Collections.<String>emptySet();
    }

    @Override
    public ViewModelComponentBuilder getViewModelComponentBuilder() {
      return new ViewModelCBuilder(singletonC, activityRetainedCImpl);
    }

    @Override
    public FragmentComponentBuilder fragmentComponentBuilder() {
      return new FragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public ViewComponentBuilder viewComponentBuilder() {
      return new ViewCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
    }

    private AddClientActivity injectAddClientActivity2(AddClientActivity instance) {
      AddClientActivity_MembersInjector.injectClientViewModelFactory(instance, singletonC.provideClientViewModelFactoryProvider.get());
      return instance;
    }

    private AddInvoiceActivity injectAddInvoiceActivity2(AddInvoiceActivity instance) {
      AddInvoiceActivity_MembersInjector.injectInvoiceViewModelFactory(instance, singletonC.provideInvoiceViewModelFactoryProvider.get());
      return instance;
    }

    private AddPaymentActivity injectAddPaymentActivity2(AddPaymentActivity instance) {
      AddPaymentActivity_MembersInjector.injectPaymentViewModelFactory(instance, singletonC.providePaymentViewModelFactoryProvider.get());
      return instance;
    }

    private AddSpendActivity injectAddSpendActivity2(AddSpendActivity instance) {
      AddSpendActivity_MembersInjector.injectAddSpendViewModelFactory(instance, singletonC.provideAddSpendViewModelFactoryProvider.get());
      return instance;
    }

    private MainActivity injectMainActivity2(MainActivity instance) {
      MainActivity_MembersInjector.injectDailyDetailsViewModelFactory(instance, singletonC.provideDailyDetailsViewModelFactoryProvider.get());
      return instance;
    }

    private ProfileActivity injectProfileActivity2(ProfileActivity instance) {
      ProfileActivity_MembersInjector.injectClientViewModelFactory(instance, singletonC.provideClientViewModelFactoryProvider.get());
      return instance;
    }
  }

  private static final class ViewModelCImpl extends AcApplication_HiltComponents.ViewModelC {
    private final DaggerAcApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ViewModelCImpl viewModelCImpl = this;

    private ViewModelCImpl(DaggerAcApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;


    }

    @Override
    public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
      return Collections.<String, Provider<ViewModel>>emptyMap();
    }
  }

  private static final class ActivityRetainedCImpl extends AcApplication_HiltComponents.ActivityRetainedC {
    private final DaggerAcApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    @SuppressWarnings("rawtypes")
    private Provider lifecycleProvider;

    private ActivityRetainedCImpl(DaggerAcApplication_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;

      initialize();

    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.lifecycleProvider = DoubleCheck.provider(new SwitchingProvider<Object>(singletonC, activityRetainedCImpl, 0));
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonC, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return (ActivityRetainedLifecycle) lifecycleProvider.get();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final DaggerAcApplication_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final int id;

      SwitchingProvider(DaggerAcApplication_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, int id) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // dagger.hilt.android.internal.managers.ActivityRetainedComponentManager.Lifecycle 
          return (T) ActivityRetainedComponentManager_Lifecycle_Factory.newInstance();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ServiceCImpl extends AcApplication_HiltComponents.ServiceC {
    private final DaggerAcApplication_HiltComponents_SingletonC singletonC;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(DaggerAcApplication_HiltComponents_SingletonC singletonC,
        Service serviceParam) {
      this.singletonC = singletonC;


    }
  }

  private static final class SwitchingProvider<T> implements Provider<T> {
    private final DaggerAcApplication_HiltComponents_SingletonC singletonC;

    private final int id;

    SwitchingProvider(DaggerAcApplication_HiltComponents_SingletonC singletonC, int id) {
      this.singletonC = singletonC;
      this.id = id;
    }

    @SuppressWarnings("unchecked")
    @Override
    public T get() {
      switch (id) {
        case 0: // com.example.acapplication.viewmodel.viewmodelfactory.ClientViewModelFactory 
        return (T) singletonC.clientViewModelFactory();

        case 1: // com.example.acapplication.repository.ClientRepository 
        return (T) singletonC.clientRepository();

        case 2: // com.example.acapplication.model.database.AcDataBase 
        return (T) singletonC.acDataBase();

        case 3: // com.example.acapplication.repository.DailyDetailsRepository 
        return (T) singletonC.dailyDetailsRepository();

        case 4: // com.example.acapplication.viewmodel.viewmodelfactory.InvoiceViewModelFactory 
        return (T) singletonC.invoiceViewModelFactory();

        case 5: // com.example.acapplication.repository.InvoiceRepository 
        return (T) singletonC.invoiceRepository();

        case 6: // com.example.acapplication.viewmodel.viewmodelfactory.PaymentViewModelFactory 
        return (T) singletonC.paymentViewModelFactory();

        case 7: // com.example.acapplication.repository.PaymentRepository 
        return (T) singletonC.paymentRepository();

        case 8: // com.example.acapplication.viewmodel.viewmodelfactory.AddSpendViewModelFactory 
        return (T) singletonC.addSpendViewModelFactory();

        case 9: // com.example.acapplication.repository.SpendRepository 
        return (T) singletonC.spendRepository();

        case 10: // com.example.acapplication.viewmodel.viewmodelfactory.DailyDetailsViewModelFactory 
        return (T) singletonC.dailyDetailsViewModelFactory();

        default: throw new AssertionError(id);
      }
    }
  }
}
