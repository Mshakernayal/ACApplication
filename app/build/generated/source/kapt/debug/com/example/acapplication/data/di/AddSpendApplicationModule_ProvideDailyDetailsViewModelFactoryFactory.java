// Generated by Dagger (https://dagger.dev).
package com.example.acapplication.data.di;

import com.example.acapplication.repository.ClientRepository;
import com.example.acapplication.repository.DailyDetailsRepository;
import com.example.acapplication.repository.InvoiceRepository;
import com.example.acapplication.repository.PaymentRepository;
import com.example.acapplication.repository.SpendRepository;
import com.example.acapplication.viewmodel.viewmodelfactory.DailyDetailsViewModelFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AddSpendApplicationModule_ProvideDailyDetailsViewModelFactoryFactory implements Factory<DailyDetailsViewModelFactory> {
  private final Provider<DailyDetailsRepository> dailyDetailsRepositoryProvider;

  private final Provider<ClientRepository> clientRepositoryProvider;

  private final Provider<InvoiceRepository> invoiceRepositoryProvider;

  private final Provider<PaymentRepository> paymentRepositoryProvider;

  private final Provider<SpendRepository> spendRepositoryProvider;

  public AddSpendApplicationModule_ProvideDailyDetailsViewModelFactoryFactory(
      Provider<DailyDetailsRepository> dailyDetailsRepositoryProvider,
      Provider<ClientRepository> clientRepositoryProvider,
      Provider<InvoiceRepository> invoiceRepositoryProvider,
      Provider<PaymentRepository> paymentRepositoryProvider,
      Provider<SpendRepository> spendRepositoryProvider) {
    this.dailyDetailsRepositoryProvider = dailyDetailsRepositoryProvider;
    this.clientRepositoryProvider = clientRepositoryProvider;
    this.invoiceRepositoryProvider = invoiceRepositoryProvider;
    this.paymentRepositoryProvider = paymentRepositoryProvider;
    this.spendRepositoryProvider = spendRepositoryProvider;
  }

  @Override
  public DailyDetailsViewModelFactory get() {
    return provideDailyDetailsViewModelFactory(dailyDetailsRepositoryProvider.get(), clientRepositoryProvider.get(), invoiceRepositoryProvider.get(), paymentRepositoryProvider.get(), spendRepositoryProvider.get());
  }

  public static AddSpendApplicationModule_ProvideDailyDetailsViewModelFactoryFactory create(
      Provider<DailyDetailsRepository> dailyDetailsRepositoryProvider,
      Provider<ClientRepository> clientRepositoryProvider,
      Provider<InvoiceRepository> invoiceRepositoryProvider,
      Provider<PaymentRepository> paymentRepositoryProvider,
      Provider<SpendRepository> spendRepositoryProvider) {
    return new AddSpendApplicationModule_ProvideDailyDetailsViewModelFactoryFactory(dailyDetailsRepositoryProvider, clientRepositoryProvider, invoiceRepositoryProvider, paymentRepositoryProvider, spendRepositoryProvider);
  }

  public static DailyDetailsViewModelFactory provideDailyDetailsViewModelFactory(
      DailyDetailsRepository dailyDetailsRepository, ClientRepository clientRepository,
      InvoiceRepository invoiceRepository, PaymentRepository paymentRepository,
      SpendRepository spendRepository) {
    return Preconditions.checkNotNullFromProvides(AddSpendApplicationModule.INSTANCE.provideDailyDetailsViewModelFactory(dailyDetailsRepository, clientRepository, invoiceRepository, paymentRepository, spendRepository));
  }
}
