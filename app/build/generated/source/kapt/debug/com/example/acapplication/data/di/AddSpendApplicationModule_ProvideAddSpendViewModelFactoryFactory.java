// Generated by Dagger (https://dagger.dev).
package com.example.acapplication.data.di;

import com.example.acapplication.repository.ClientRepository;
import com.example.acapplication.repository.DailyDetailsRepository;
import com.example.acapplication.repository.SpendRepository;
import com.example.acapplication.viewmodel.viewmodelfactory.AddSpendViewModelFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AddSpendApplicationModule_ProvideAddSpendViewModelFactoryFactory implements Factory<AddSpendViewModelFactory> {
  private final Provider<SpendRepository> spendRepositoryProvider;

  private final Provider<DailyDetailsRepository> dailyDetailsRepositoryProvider;

  private final Provider<ClientRepository> clientRepositoryProvider;

  public AddSpendApplicationModule_ProvideAddSpendViewModelFactoryFactory(
      Provider<SpendRepository> spendRepositoryProvider,
      Provider<DailyDetailsRepository> dailyDetailsRepositoryProvider,
      Provider<ClientRepository> clientRepositoryProvider) {
    this.spendRepositoryProvider = spendRepositoryProvider;
    this.dailyDetailsRepositoryProvider = dailyDetailsRepositoryProvider;
    this.clientRepositoryProvider = clientRepositoryProvider;
  }

  @Override
  public AddSpendViewModelFactory get() {
    return provideAddSpendViewModelFactory(spendRepositoryProvider.get(), dailyDetailsRepositoryProvider.get(), clientRepositoryProvider.get());
  }

  public static AddSpendApplicationModule_ProvideAddSpendViewModelFactoryFactory create(
      Provider<SpendRepository> spendRepositoryProvider,
      Provider<DailyDetailsRepository> dailyDetailsRepositoryProvider,
      Provider<ClientRepository> clientRepositoryProvider) {
    return new AddSpendApplicationModule_ProvideAddSpendViewModelFactoryFactory(spendRepositoryProvider, dailyDetailsRepositoryProvider, clientRepositoryProvider);
  }

  public static AddSpendViewModelFactory provideAddSpendViewModelFactory(
      SpendRepository spendRepository, DailyDetailsRepository dailyDetailsRepository,
      ClientRepository clientRepository) {
    return Preconditions.checkNotNullFromProvides(AddSpendApplicationModule.INSTANCE.provideAddSpendViewModelFactory(spendRepository, dailyDetailsRepository, clientRepository));
  }
}
